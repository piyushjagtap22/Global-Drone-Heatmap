{"version":3,"sources":["../../../../src/lib/xml/parse-xml.js"],"names":["parseXML","xml","window","DOMParser","xmlDoc","parseFromString","parseError","isXMLParseError","Error","ActiveXObject","async","loadXML","parseXMLSupported","parsedDocument","parser","erroneousParse","parsererrorNS","getElementsByTagName","namespaceURI","errorElements","length","innerHTML","getElementsByTagNameNS"],"mappings":";;;;;;;;AACe,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACpC,MAAIC,MAAM,CAACC,SAAX,EAAsB;AACpB,QAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,SAAX,GAAuBE,eAAvB,CAAuCJ,GAAvC,EAA4C,iBAA5C,CAAf;AACA,QAAMK,UAAU,GAAGC,eAAe,CAACH,MAAD,CAAlC;;AACA,QAAIE,UAAJ,EAAgB;AACd,YAAM,IAAIE,KAAJ,CAAUF,UAAV,CAAN;AACD;;AACD,WAAOF,MAAP;AACD;;AAED,MAAI,OAAOF,MAAM,CAACO,aAAd,KAAgC,WAApC,EAAiD;AAC/C,QAAML,OAAM,GAAG,IAAIF,MAAM,CAACO,aAAX,CAAyB,kBAAzB,CAAf;;AACA,QAAIL,OAAJ,EAAY;AACVA,MAAAA,OAAM,CAACM,KAAP,GAAe,OAAf;;AACAN,MAAAA,OAAM,CAACO,OAAP,CAAeV,GAAf;;AACA,aAAOG,OAAP;AACD;AACF;;AAED,QAAM,IAAII,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAEM,SAASI,iBAAT,GAA6B;AAClC,MAAI,OAAOV,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,MAAIA,MAAM,CAACC,SAAX,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED,MAAI,OAAOD,MAAM,CAACO,aAAd,KAAgC,WAAhC,IAA+C,IAAIP,MAAM,CAACO,aAAX,CAAyB,kBAAzB,CAAnD,EAAiG;AAC/F,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAGD,SAASF,eAAT,CAAyBM,cAAzB,EAAyC;AACvC,MAAMC,MAAM,GAAG,IAAIX,SAAJ,EAAf;AACA,MAAMY,cAAc,GAAGD,MAAM,CAACT,eAAP,CAAuB,GAAvB,EAA4B,UAA5B,CAAvB;AACA,MAAMW,aAAa,GAAGD,cAAc,CAACE,oBAAf,CAAoC,aAApC,EAAmD,CAAnD,EAAsDC,YAA5E;;AAEA,MAAIF,aAAa,KAAK,8BAAtB,EAAsD;AAGpD,QAAMG,aAAa,GAAGN,cAAc,CAACI,oBAAf,CAAoC,aAApC,CAAtB;AACA,WAAOE,aAAa,CAACC,MAAd,GAAuBD,aAAa,CAAC,CAAD,CAAb,CAAiBE,SAAxC,GAAoD,IAA3D;AACD;;AAED,SAAOR,cAAc,CAACS,sBAAf,CAAsCN,aAAtC,EAAqD,aAArD,EAAoEI,MAApE,GAA6E,CAApF;AACD","sourcesContent":["/* global window, DOMParser */\nexport default function parseXML(xml) {\n  if (window.DOMParser) {\n    const xmlDoc = new window.DOMParser().parseFromString(xml, 'application/xml');\n    const parseError = isXMLParseError(xmlDoc);\n    if (parseError) {\n      throw new Error(parseError);\n    }\n    return xmlDoc;\n  }\n\n  if (typeof window.ActiveXObject !== 'undefined') {\n    const xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');\n    if (xmlDoc) {\n      xmlDoc.async = 'false';\n      xmlDoc.loadXML(xml);\n      return xmlDoc;\n    }\n  }\n\n  throw new Error('No XML parser available');\n}\n\nexport function parseXMLSupported() {\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  if (window.DOMParser) {\n    return true;\n  }\n\n  if (typeof window.ActiveXObject !== 'undefined' && new window.ActiveXObject('Microsoft.XMLDOM')) {\n    return true;\n  }\n\n  return false;\n}\n\n// https://stackoverflow.com/questions/11563554/how-do-i-detect-xml-parsing-errors-when-using-javascripts-domparser-in-a-cross\nfunction isXMLParseError(parsedDocument) {\n  const parser = new DOMParser();\n  const erroneousParse = parser.parseFromString('<', 'text/xml');\n  const parsererrorNS = erroneousParse.getElementsByTagName('parsererror')[0].namespaceURI;\n\n  if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {\n    // In PhantomJS the parseerror element doesn't seem to have a special namespace,\n    // so we are just guessing here :(\n    const errorElements = parsedDocument.getElementsByTagName('parsererror');\n    return errorElements.length ? errorElements[0].innerHTML : null;\n  }\n\n  return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;\n}\n"],"file":"parse-xml.js"}