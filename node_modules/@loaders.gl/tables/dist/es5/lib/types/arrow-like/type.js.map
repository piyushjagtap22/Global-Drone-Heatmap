{"version":3,"sources":["../../../../../src/lib/types/arrow-like/type.js"],"names":["DataType","other","Type","NONE","x","typeId","Null","Int","Float","Binary","Utf8","Bool","Decimal","Date","Time","Timestamp","Interval","List","Struct","Union","FixedSizeBinary","FixedSizeList","Map","Dictionary","Symbol","toStringTag","Uint8Array","isSigned","bitWidth","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Error","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Precision","HALF","SINGLE","DOUBLE","precision","Float32Array","Float64Array","Float16","Float32","Float64","DateUnit","DAY","MILLISECOND","unit","DateDay","DateMillisecond","TimeUnit","SECOND","MICROSECOND","NANOSECOND","TimeSecond","TimeMillisecond","timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","IntervalUnit","DAY_TIME","YEAR_MONTH","IntervalDayTime","IntervalYearMonth","listSize","child","children","valueType","type","ArrayType"],"mappings":"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","sourcesContent":["// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\nimport {Type} from './enum';\n\nexport class DataType {\n  static isNull(x) {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x) {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x) {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x) {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x) {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x) {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x) {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x) {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x) {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x) {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x) {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x) {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x) {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x) {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x) {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x) {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x) {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x) {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId() {\n    return Type.NONE;\n  }\n  // get ArrayType() { return Array; }\n  compareTo(other) {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n\n// NULL\n\nexport class Null extends DataType {\n  get typeId() {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Null';\n  }\n  toString() {\n    return `Null`;\n  }\n}\n\n// BOOLEANS\n\nexport class Bool extends DataType {\n  get typeId() {\n    return Type.Bool;\n  }\n  get ArrayType() {\n    return Uint8Array;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Bool';\n  }\n  toString() {\n    return `Bool`;\n  }\n}\n\n// INTS\n\nexport class Int extends DataType {\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Int;\n  }\n  get ArrayType() {\n    switch (this.bitWidth) {\n      case 8:\n        return this.isSigned ? Int8Array : Uint8Array;\n      case 16:\n        return this.isSigned ? Int16Array : Uint16Array;\n      case 32:\n        return this.isSigned ? Int32Array : Uint32Array;\n      case 64:\n        return this.isSigned ? Int32Array : Uint32Array;\n      default:\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return 'Int';\n  }\n  toString() {\n    return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`;\n  }\n}\n\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n\n// FLOATS\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n\nexport class Float extends DataType {\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId() {\n    return Type.Float;\n  }\n  get ArrayType() {\n    switch (this.precision) {\n      case Precision.HALF:\n        return Uint16Array;\n      case Precision.SINGLE:\n        return Float32Array;\n      case Precision.DOUBLE:\n        return Float64Array;\n      default:\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return 'Float';\n  }\n  toString() {\n    return `Float${this.precision}`;\n  }\n}\n\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\n\n// STRINGS\n\nexport class Utf8 extends DataType {\n  get typeId() {\n    return Type.Utf8;\n  }\n  get ArrayType() {\n    return Uint8Array;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Utf8';\n  }\n  toString() {\n    return `Utf8`;\n  }\n}\n\n// DATES, TIMES AND INTERVALS\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n\nexport class Date extends DataType {\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Date;\n  }\n  get ArrayType() {\n    return Int32Array;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Date';\n  }\n  toString() {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\n\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n\nexport class Time extends DataType {\n  constructor(unit, bitWidth) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId() {\n    return Type.Time;\n  }\n  toString() {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Time';\n  }\n  get ArrayType() {\n    return Int32Array;\n  }\n}\n\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\nexport class Timestamp extends DataType {\n  constructor(unit, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId() {\n    return Type.Timestamp;\n  }\n  get ArrayType() {\n    return Int32Array;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Timestamp';\n  }\n  toString() {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`;\n  }\n}\n\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n\nexport class Interval extends DataType {\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId() {\n    return Type.Interval;\n  }\n  get ArrayType() {\n    return Int32Array;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Interval';\n  }\n  toString() {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\n\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n\nexport class FixedSizeList extends DataType {\n  constructor(listSize, child) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId() {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  get ArrayType() {\n    return this.valueType.ArrayType;\n  }\n  get [Symbol.toStringTag]() {\n    return 'FixedSizeList';\n  }\n  toString() {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\n"],"file":"type.js"}