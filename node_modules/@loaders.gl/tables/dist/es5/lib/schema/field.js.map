{"version":3,"sources":["../../../../src/lib/schema/field.js"],"names":["Field","name","type","nullable","metadata","Map","DataType","other","typeId"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;IAOqBA,K;AACnB,iBAAYC,IAAZ,EAAuE;AAAA,QAArDC,IAAqD,uEAA9C,IAA8C;AAAA,QAAxCC,QAAwC,uEAA7B,KAA6B;AAAA,QAAtBC,QAAsB,uEAAX,IAAIC,GAAJ,EAAW;AAAA;AACrE,4BAAO,OAAOJ,IAAP,KAAgB,QAAvB;AACA,4BAAO,CAACC,IAAD,IAASA,IAAI,YAAYI,cAAhC;AACA,4BAAO,OAAOH,QAAP,KAAoB,SAA3B;AACA,4BAAO,CAACC,QAAD,IAAa,yBAAOA,QAAP,MAAoB,QAAxC;AAEA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;;;4BAMO;AACN,aAAO,IAAIJ,KAAJ,CAAU,KAAKC,IAAf,EAAqB,KAAKC,IAA1B,EAAgC,KAAKC,QAArC,EAA+C,KAAKC,QAApD,CAAP;AACD;;;8BAESG,K,EAAO;AACf,aACE,KAAKN,IAAL,KAAcM,KAAK,CAACN,IAApB,IACA,KAAKC,IAAL,KAAcK,KAAK,CAACL,IADpB,IAEA,KAAKC,QAAL,KAAkBI,KAAK,CAACJ,QAFxB,IAGA,KAAKC,QAAL,KAAkBG,KAAK,CAACH,QAJ1B;AAMD;;;+BAEU;AACT,uBAAU,KAAKF,IAAf,SAAsB,KAAKC,QAAL,GAAgB,YAAhB,GAA+B,EAArD,SACE,KAAKC,QAAL,yBAA+B,KAAKA,QAApC,IAAiD,EADnD;AAGD;;;wBArBY;AACX,aAAO,KAAKF,IAAL,IAAa,KAAKA,IAAL,CAAUM,MAA9B;AACD","sourcesContent":["import assert from '../utils/assert';\nimport {DataType} from '../types/arrow-like/type';\n\n// ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n// https://loaders.gl/arrowjs/docs/api-reference/field\n// A field holds name, nullable, and metadata information about a table \"column\"\n// A Schema is essentially a list of fields\n\nexport default class Field {\n  constructor(name, type = null, nullable = false, metadata = new Map()) {\n    assert(typeof name === 'string');\n    assert(!type || type instanceof DataType);\n    assert(typeof nullable === 'boolean');\n    assert(!metadata || typeof metadata === 'object');\n\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId() {\n    return this.type && this.type.typeId;\n  }\n\n  clone() {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other) {\n    return (\n      this.name === other.name &&\n      this.type === other.type &&\n      this.nullable === other.nullable &&\n      this.metadata === other.metadata\n    );\n  }\n\n  toString() {\n    return `${this.type}${this.nullable ? ', nullable' : ''}${\n      this.metadata ? `, metadata: ${this.metadata}` : ''\n    }`;\n  }\n}\n"],"file":"field.js"}