{"version":3,"sources":["../../../../src/lib/schema/schema-utils.js"],"names":["TYPED_ARRAY_TO_TYPE","Int8Array","Int8","Int16Array","Int16","Int32Array","Int32","Uint8Array","Uint8","Uint8ClampedArray","Uint16Array","Uint16","Uint32Array","Uint32","Float32Array","Float32","Float64Array","Float64","BigInt64Array","Int64","BigUint64Array","Uint64","getTypeFromColumnArray","columnArray","ArrayType","constructor","name","type","nullable","metadata","length","value","deduceTypeFromValue","Map","toString","Null","deduceTableSchema","table","schema","deducedSchema","Array","isArray","deduceSchemaForRowTable","deduceSchemaForColumnarTable","Object","assign","columnarTable","fields","columnName","push","Field","Schema","rowTable","row","columnIndex","String","Bool","Date","TimestampMillisecond","Number","Utf8"],"mappings":"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","sourcesContent":["// SCHEMA SUPPORT - AUTODEDUCTION\nimport {\n  // Int,\n  Int8,\n  Int16,\n  Int32,\n  Int64,\n  Uint8,\n  Uint16,\n  Uint32,\n  Uint64,\n  // Float,\n  // Float16,\n  Float32,\n  Float64,\n  Bool,\n  Utf8,\n  TimestampMillisecond,\n  Null\n} from '../types/arrow-like/type';\nimport Schema from './schema';\nimport Field from './field';\n\nconst TYPED_ARRAY_TO_TYPE = {\n  Int8Array: new Int8(),\n  Int16Array: new Int16(),\n  Int32Array: new Int32(),\n  Uint8Array: new Uint8(),\n  Uint8ClampedArray: new Uint8(),\n  Uint16Array: new Uint16(),\n  Uint32Array: new Uint32(),\n  Float32Array: new Float32(),\n  Float64Array: new Float64()\n};\n\nif (typeof BigInt64Array !== 'undefined') {\n  TYPED_ARRAY_TO_TYPE.BigInt64Array = new Int64();\n  TYPED_ARRAY_TO_TYPE.BigUint64Array = new Uint64();\n}\n\n// Type deduction\n\n/**\n * Type deduction from columnar array\n *\n * Notes:\n * - If the column is a typed array we are able to make a fairly precise type deduction\n * - However we can't tell if it is intervals, dates, fixed size lists etc.\n * - Nullable typed arrays are only supported if backing table is Arrow\n *\n * @param {*} columnArray\n * @returns type, nullable, metadata - (Arrow-like) type information\n */\nfunction getTypeFromColumnArray(columnArray) {\n  const ArrayType = columnArray.constructor && columnArray.constructor.name;\n  let type = TYPED_ARRAY_TO_TYPE[ArrayType];\n  if (type) {\n    return {type, nullable: false, metadata: null};\n  }\n\n  let metadata = null;\n  if (columnArray.length > 0) {\n    const value = columnArray[0];\n    type = deduceTypeFromValue(value);\n    if (type) {\n      metadata = new Map([['type', type.toString()]]);\n    }\n  }\n\n  // We use fields of Arrow-Type Null to indicate that we represent additional, non binary columns\n  return {type: new Null(), nullable: true, metadata};\n}\n\nexport function deduceTableSchema(table, schema = null) {\n  const deducedSchema = Array.isArray(table)\n    ? deduceSchemaForRowTable(table)\n    : deduceSchemaForColumnarTable(table);\n  // Deduced schema will fill in missing info from partial options.schema, if provided\n  return Object.assign(deducedSchema, schema);\n}\n\nfunction deduceSchemaForColumnarTable(columnarTable) {\n  const fields = [];\n  for (const columnName in columnarTable) {\n    const columnArray = columnarTable[columnName];\n    const {type, nullable, metadata} = getTypeFromColumnArray(columnArray);\n    fields.push(new Field(columnName, type, nullable, metadata || new Map()));\n  }\n  return new Schema(fields);\n}\n\nfunction deduceSchemaForRowTable(rowTable) {\n  const fields = [];\n  if (rowTable.length) {\n    const row = rowTable[0];\n    // Note - handle rows in both array and object format\n    if (Array.isArray(row)) {\n      // row: [value1, value2, ...]\n      for (let columnIndex = 0; columnIndex < row.length; ++columnIndex) {\n        const value = row[columnIndex];\n        const name = String(columnIndex);\n        const type = deduceTypeFromValue(value);\n        const nullable = true;\n        const metadata = new Map([['type', type.toString()]]);\n        fields.push(new Field(name, new Null(), nullable, metadata));\n      }\n    } else {\n      for (const columnName in row) {\n        // row: {columnName1: value1, columnName2: value2, ...}\n        // TODO - Could look at additional rows if nulls in first row\n        const value = row[columnName];\n        const type = deduceTypeFromValue(value);\n        const nullable = true;\n        const metadata = new Map([['type', type.toString()]]);\n        fields.push(new Field(columnName, new Null(), nullable, metadata));\n      }\n    }\n  }\n  return new Schema(fields);\n}\n\nfunction deduceTypeFromValue(value) {\n  if (value === true || value === false) {\n    return new Bool();\n  }\n  if (value instanceof Date) {\n    return new TimestampMillisecond();\n  }\n  if (value instanceof Number) {\n    return new Float32();\n  }\n  if (typeof value === 'string') {\n    return new Utf8();\n  }\n  // TODO JS columns (arrays and object valued) are currently null\n  return new Null();\n}\n"],"file":"schema-utils.js"}