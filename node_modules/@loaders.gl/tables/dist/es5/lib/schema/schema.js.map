{"version":3,"sources":["../../../../src/lib/schema/schema.js"],"names":["Schema","fields","metadata","Array","isArray","checkNames","Map","other","length","i","compareTo","nameMap","Object","create","columnNames","name","selectedFields","filter","field","columnIndices","map","index","Boolean","schemaOrFields","otherSchema","mergeMaps","fieldMap","mergedFields","values","usedNames","console","warn","m1","m2"],"mappings":"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","sourcesContent":["import assert from '../utils/assert';\n\n// ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n// https://loaders.gl/arrowjs/docs/api-reference/schema\nexport default class Schema {\n  constructor(fields, metadata = null) {\n    assert(Array.isArray(fields));\n    checkNames(fields);\n    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`\n    this.fields = fields;\n    this.metadata = metadata || new Map();\n  }\n\n  // TODO - arrow only seems to compare fields\n  compareTo(other) {\n    if (this.fields.metadata !== other.fields.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  select(...columnNames) {\n    // Ensure column names reference valid fields\n    const nameMap = Object.create(null);\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = columnNames.filter(field => nameMap[field.name]);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  selectAt(...columnIndices) {\n    // Ensure column indices reference valid fields\n    const selectedFields = columnIndices.map(index => this.fields[index]).filter(Boolean);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  assign(schemaOrFields) {\n    let metadata = this.metadata;\n\n    let fields = schemaOrFields;\n    if (schemaOrFields instanceof Schema) {\n      const otherSchema = schemaOrFields;\n      fields = otherSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);\n    }\n\n    // Create a merged list of fields, overwrite fields in place, new fields at end\n    const fieldMap = Object.create(null);\n\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n\n    const mergedFields = Object.values(fieldMap);\n\n    return new Schema(mergedFields, metadata);\n  }\n}\n\n// Warn if any duplicated field names\nfunction checkNames(fields) {\n  const usedNames = {};\n  for (const field of fields) {\n    if (usedNames[field.name]) {\n      // eslint-disable-next-line\n      console.warn('Schema: duplicated field name', field.name, field);\n    }\n    usedNames[field.name] = true;\n  }\n}\n\nfunction mergeMaps(m1, m2) {\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n"],"file":"schema.js"}