{"version":3,"sources":["../../../../src/lib/utils/async-queue.js"],"names":["ArrayQueue","value","push","shift","Array","takeAsync","asyncIterable","count","Infinity","result","iterator","Symbol","asyncIterator","length","next","done","AsyncQueue","_values","_settlers","_closed","dequeue","resolve","Error","settler","reject","enqueue","Promise"],"mappings":"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","sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\nclass ArrayQueue extends Array {\n  enqueue(value) {\n    // Add at the end\n    return this.push(value);\n  }\n  dequeue() {\n    // Remove first element\n    return this.shift();\n  }\n}\n\n/**\n * @returns a Promise for an Array with the elements\n * in `asyncIterable`\n */\nexport async function takeAsync(asyncIterable, count = Infinity) {\n  const result = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) {\n      break;\n    }\n    result.push(value);\n  }\n  return result;\n}\n\nexport default class AsyncQueue {\n  constructor() {\n    // enqueues > dequeues\n    this._values = new ArrayQueue();\n    // dequeues > enqueues\n    this._settlers = new ArrayQueue();\n    this._closed = false;\n  }\n\n  close() {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.dequeue();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n\n  /**\n   * @returns a Promise for an IteratorResult\n   */\n  next() {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({value});\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true});\n    }\n    // Wait for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({resolve, reject});\n    });\n  }\n}\n"],"file":"async-queue.js"}