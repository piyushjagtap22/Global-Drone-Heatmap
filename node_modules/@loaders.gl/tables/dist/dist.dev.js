(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/bundle.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/bundle.js":
/*!***********************!*\
  !*** ./src/bundle.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/* global window, global */
const moduleExports = __webpack_require__(/*! ./index */ "./src/index.js");

const _global = typeof window === 'undefined' ? global : window;
// @ts-ignore
_global.loaders = _global.loaders || {};
// @ts-ignore
module.exports = Object.assign(_global.loaders, moduleExports);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: Schema, Field, deduceTableSchema, TableBatchBuilder, RowTableBatch, ColumnarTableBatch, JSONLoader, XMLLoader, AsyncQueue, getTypeInfo, DataType, Null, Bool, Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64, Float, Float16, Float32, Float64, Utf8, Date, DateDay, DateMillisecond, Time, TimeMillisecond, TimeSecond, Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond, Interval, IntervalDayTime, IntervalYearMonth, FixedSizeList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_schema_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/schema/schema */ "./src/lib/schema/schema.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Schema", function() { return _lib_schema_schema__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _lib_schema_field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/schema/field */ "./src/lib/schema/field.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Field", function() { return _lib_schema_field__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _lib_schema_schema_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/schema/schema-utils */ "./src/lib/schema/schema-utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deduceTableSchema", function() { return _lib_schema_schema_utils__WEBPACK_IMPORTED_MODULE_2__["deduceTableSchema"]; });

/* harmony import */ var _lib_table_table_batch_builder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/table/table-batch-builder */ "./src/lib/table/table-batch-builder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TableBatchBuilder", function() { return _lib_table_table_batch_builder__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _lib_table_row_table_batch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/table/row-table-batch */ "./src/lib/table/row-table-batch.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RowTableBatch", function() { return _lib_table_row_table_batch__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _lib_table_columnar_table_batch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/table/columnar-table-batch */ "./src/lib/table/columnar-table-batch.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColumnarTableBatch", function() { return _lib_table_columnar_table_batch__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _json_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./json-loader */ "./src/json-loader.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JSONLoader", function() { return _json_loader__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _xml_loader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./xml-loader */ "./src/xml-loader.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XMLLoader", function() { return _xml_loader__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _lib_utils_async_queue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/utils/async-queue */ "./src/lib/utils/async-queue.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AsyncQueue", function() { return _lib_utils_async_queue__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _lib_types_type_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/types/type-utils */ "./src/lib/types/type-utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getTypeInfo", function() { return _lib_types_type_utils__WEBPACK_IMPORTED_MODULE_9__["getTypeInfo"]; });

/* harmony import */ var _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/types/arrow-like/type */ "./src/lib/types/arrow-like/type.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataType", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["DataType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Null", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Null"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Bool", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Bool"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Int", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Int"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Int8", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Int8"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Int16", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Int16"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Int32", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Int32"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Int64", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Int64"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uint8", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Uint8"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uint16", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Uint16"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uint32", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Uint32"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uint64", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Uint64"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Float", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Float"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Float16", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Float16"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Float32", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Float32"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Float64", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Float64"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Utf8", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Utf8"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Date", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Date"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DateDay", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["DateDay"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DateMillisecond", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["DateMillisecond"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Time", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Time"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimeMillisecond", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["TimeMillisecond"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimeSecond", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["TimeSecond"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Timestamp", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Timestamp"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimestampSecond", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["TimestampSecond"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimestampMillisecond", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["TimestampMillisecond"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimestampMicrosecond", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["TimestampMicrosecond"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimestampNanosecond", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["TimestampNanosecond"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Interval", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["Interval"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntervalDayTime", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["IntervalDayTime"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "IntervalYearMonth", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["IntervalYearMonth"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FixedSizeList", function() { return _lib_types_arrow_like_type__WEBPACK_IMPORTED_MODULE_10__["FixedSizeList"]; });





// TABLE CATEGORY UTILS




// EXPERIMENTAL MICRO-LOADERS



// EXPERIMENTAL APIs


// TYPES





/***/ }),

/***/ "./src/json-loader.js":
/*!****************************!*\
  !*** ./src/json-loader.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// TODO - deprecated
function parseTextSync(text, options) {
  return JSON.parse(text);
}

/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'JSON',
  extensions: ['json'],
  testText: null,
  parseTextSync
});


/***/ }),

/***/ "./src/lib/schema/field.js":
/*!*********************************!*\
  !*** ./src/lib/schema/field.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Field; });
/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/assert */ "./src/lib/utils/assert.js");
/* harmony import */ var _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/arrow-like/type */ "./src/lib/types/arrow-like/type.js");



// ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)
// https://loaders.gl/arrowjs/docs/api-reference/field
// A field holds name, nullable, and metadata information about a table "column"
// A Schema is essentially a list of fields

class Field {
  constructor(name, type = null, nullable = false, metadata = new Map()) {
    Object(_utils_assert__WEBPACK_IMPORTED_MODULE_0__["default"])(typeof name === 'string');
    Object(_utils_assert__WEBPACK_IMPORTED_MODULE_0__["default"])(!type || type instanceof _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_1__["DataType"]);
    Object(_utils_assert__WEBPACK_IMPORTED_MODULE_0__["default"])(typeof nullable === 'boolean');
    Object(_utils_assert__WEBPACK_IMPORTED_MODULE_0__["default"])(!metadata || typeof metadata === 'object');

    this.name = name;
    this.type = type;
    this.nullable = nullable;
    this.metadata = metadata;
  }

  get typeId() {
    return this.type && this.type.typeId;
  }

  clone() {
    return new Field(this.name, this.type, this.nullable, this.metadata);
  }

  compareTo(other) {
    return (
      this.name === other.name &&
      this.type === other.type &&
      this.nullable === other.nullable &&
      this.metadata === other.metadata
    );
  }

  toString() {
    return `${this.type}${this.nullable ? ', nullable' : ''}${
      this.metadata ? `, metadata: ${this.metadata}` : ''
    }`;
  }
}


/***/ }),

/***/ "./src/lib/schema/schema-utils.js":
/*!****************************************!*\
  !*** ./src/lib/schema/schema-utils.js ***!
  \****************************************/
/*! exports provided: deduceTableSchema */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deduceTableSchema", function() { return deduceTableSchema; });
/* harmony import */ var _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/arrow-like/type */ "./src/lib/types/arrow-like/type.js");
/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schema */ "./src/lib/schema/schema.js");
/* harmony import */ var _field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./field */ "./src/lib/schema/field.js");
// SCHEMA SUPPORT - AUTODEDUCTION




const TYPED_ARRAY_TO_TYPE = {
  Int8Array: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Int8"](),
  Int16Array: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Int16"](),
  Int32Array: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Int32"](),
  Uint8Array: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Uint8"](),
  Uint8ClampedArray: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Uint8"](),
  Uint16Array: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Uint16"](),
  Uint32Array: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Uint32"](),
  Float32Array: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Float32"](),
  Float64Array: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Float64"]()
};

if (typeof BigInt64Array !== 'undefined') {
  TYPED_ARRAY_TO_TYPE.BigInt64Array = new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Int64"]();
  TYPED_ARRAY_TO_TYPE.BigUint64Array = new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Uint64"]();
}

// Type deduction

/**
 * Type deduction from columnar array
 *
 * Notes:
 * - If the column is a typed array we are able to make a fairly precise type deduction
 * - However we can't tell if it is intervals, dates, fixed size lists etc.
 * - Nullable typed arrays are only supported if backing table is Arrow
 *
 * @param {*} columnArray
 * @returns type, nullable, metadata - (Arrow-like) type information
 */
function getTypeFromColumnArray(columnArray) {
  const ArrayType = columnArray.constructor && columnArray.constructor.name;
  let type = TYPED_ARRAY_TO_TYPE[ArrayType];
  if (type) {
    return {type, nullable: false, metadata: null};
  }

  let metadata = null;
  if (columnArray.length > 0) {
    const value = columnArray[0];
    type = deduceTypeFromValue(value);
    if (type) {
      metadata = new Map([['type', type.toString()]]);
    }
  }

  // We use fields of Arrow-Type Null to indicate that we represent additional, non binary columns
  return {type: new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Null"](), nullable: true, metadata};
}

function deduceTableSchema(table, schema = null) {
  const deducedSchema = Array.isArray(table)
    ? deduceSchemaForRowTable(table)
    : deduceSchemaForColumnarTable(table);
  // Deduced schema will fill in missing info from partial options.schema, if provided
  return Object.assign(deducedSchema, schema);
}

function deduceSchemaForColumnarTable(columnarTable) {
  const fields = [];
  for (const columnName in columnarTable) {
    const columnArray = columnarTable[columnName];
    const {type, nullable, metadata} = getTypeFromColumnArray(columnArray);
    fields.push(new _field__WEBPACK_IMPORTED_MODULE_2__["default"](columnName, type, nullable, metadata || new Map()));
  }
  return new _schema__WEBPACK_IMPORTED_MODULE_1__["default"](fields);
}

function deduceSchemaForRowTable(rowTable) {
  const fields = [];
  if (rowTable.length) {
    const row = rowTable[0];
    // Note - handle rows in both array and object format
    if (Array.isArray(row)) {
      // row: [value1, value2, ...]
      for (let columnIndex = 0; columnIndex < row.length; ++columnIndex) {
        const value = row[columnIndex];
        const name = String(columnIndex);
        const type = deduceTypeFromValue(value);
        const nullable = true;
        const metadata = new Map([['type', type.toString()]]);
        fields.push(new _field__WEBPACK_IMPORTED_MODULE_2__["default"](name, new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Null"](), nullable, metadata));
      }
    } else {
      for (const columnName in row) {
        // row: {columnName1: value1, columnName2: value2, ...}
        // TODO - Could look at additional rows if nulls in first row
        const value = row[columnName];
        const type = deduceTypeFromValue(value);
        const nullable = true;
        const metadata = new Map([['type', type.toString()]]);
        fields.push(new _field__WEBPACK_IMPORTED_MODULE_2__["default"](columnName, new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Null"](), nullable, metadata));
      }
    }
  }
  return new _schema__WEBPACK_IMPORTED_MODULE_1__["default"](fields);
}

function deduceTypeFromValue(value) {
  if (value === true || value === false) {
    return new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Bool"]();
  }
  if (value instanceof Date) {
    return new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["TimestampMillisecond"]();
  }
  if (value instanceof Number) {
    return new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Float32"]();
  }
  if (typeof value === 'string') {
    return new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Utf8"]();
  }
  // TODO JS columns (arrays and object valued) are currently null
  return new _types_arrow_like_type__WEBPACK_IMPORTED_MODULE_0__["Null"]();
}


/***/ }),

/***/ "./src/lib/schema/schema.js":
/*!**********************************!*\
  !*** ./src/lib/schema/schema.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Schema; });
/* harmony import */ var _utils_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/assert */ "./src/lib/utils/assert.js");


// ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)
// https://loaders.gl/arrowjs/docs/api-reference/schema
class Schema {
  constructor(fields, metadata = null) {
    Object(_utils_assert__WEBPACK_IMPORTED_MODULE_0__["default"])(Array.isArray(fields));
    checkNames(fields);
    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`
    this.fields = fields;
    this.metadata = metadata || new Map();
  }

  // TODO - arrow only seems to compare fields
  compareTo(other) {
    if (this.fields.metadata !== other.fields.metadata) {
      return false;
    }
    if (this.fields.length !== other.fields.length) {
      return false;
    }
    for (let i = 0; i < this.fields.length; ++i) {
      if (!this.fields[i].compareTo(other.fields[i])) {
        return false;
      }
    }
    return true;
  }

  select(...columnNames) {
    // Ensure column names reference valid fields
    const nameMap = Object.create(null);
    for (const name of columnNames) {
      nameMap[name] = true;
    }
    const selectedFields = columnNames.filter(field => nameMap[field.name]);
    return new Schema(selectedFields, this.metadata);
  }

  selectAt(...columnIndices) {
    // Ensure column indices reference valid fields
    const selectedFields = columnIndices.map(index => this.fields[index]).filter(Boolean);
    return new Schema(selectedFields, this.metadata);
  }

  assign(schemaOrFields) {
    let metadata = this.metadata;

    let fields = schemaOrFields;
    if (schemaOrFields instanceof Schema) {
      const otherSchema = schemaOrFields;
      fields = otherSchema.fields;
      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);
    }

    // Create a merged list of fields, overwrite fields in place, new fields at end
    const fieldMap = Object.create(null);

    for (const field of this.fields) {
      fieldMap[field.name] = field;
    }

    for (const field of fields) {
      fieldMap[field.name] = field;
    }

    const mergedFields = Object.values(fieldMap);

    return new Schema(mergedFields, metadata);
  }
}

// Warn if any duplicated field names
function checkNames(fields) {
  const usedNames = {};
  for (const field of fields) {
    if (usedNames[field.name]) {
      // eslint-disable-next-line
      console.warn('Schema: duplicated field name', field.name, field);
    }
    usedNames[field.name] = true;
  }
}

function mergeMaps(m1, m2) {
  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);
}


/***/ }),

/***/ "./src/lib/table/columnar-table-batch.js":
/*!***********************************************!*\
  !*** ./src/lib/table/columnar-table-batch.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ColumnarTableBatch; });
class ColumnarTableBatch {
  constructor(schema, options = {}) {
    this.schema = schema;
    this.batchSize = options.batchSize || 'auto';

    this.length = 0;
    this.allocated = 0;
    this.columns = null;
    this.isChunkComplete = false;

    this.reallocateColumns();
  }

  addRow(row) {
    // If user keeps pushing rows beyond batch size, reallocate
    this.reallocateColumns();
    for (const fieldName in row) {
      this.columns[fieldName][this.length] = row[fieldName];
    }
    this.length++;
  }

  // Is this TableBatch full?
  chunkComplete() {
    this.isChunkComplete = true;
  }

  isFull() {
    if (this.batchSize === 'auto') {
      return this.isChunkComplete;
    }
    return this.length >= this.allocated;
  }

  getBatch(options = {}) {
    this.pruneColumns();
    const columns = Array.isArray(this.schema) ? this.columns : {};

    // schema is an array if there're no headers
    // object if there are headers
    // columns should match schema format
    if (!Array.isArray(this.schema)) {
      for (const fieldName in this.schema) {
        const field = this.schema[fieldName];
        columns[field.name] = this.columns[field.index];
      }
    }

    this.columns = null;
    this.isChunkComplete = false;

    return {data: columns, schema: this.schema, length: this.length};
  }

  // HELPERS

  reallocateColumns() {
    if (this.length < this.allocated) {
      return;
    }

    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : this.batchSize;
    this.columns = [];

    for (const fieldName in this.schema) {
      const field = this.schema[fieldName];
      const ArrayType = field.type || Float32Array;
      const oldColumn = this.columns[field.index];

      if (oldColumn && ArrayBuffer.isView(oldColumn)) {
        // Copy the old data to the new array
        const typedArray = new ArrayType(this.allocated);
        typedArray.set(oldColumn);
        this.columns[field.index] = typedArray;
      } else if (oldColumn) {
        // Plain array
        oldColumn.length = this.allocated;
        this.columns[field.index] = oldColumn;
      } else {
        // Create new
        this.columns[field.index] = new ArrayType(this.allocated);
      }
    }
  }

  pruneColumns() {
    this.columns = this.columns.map(column => column.slice(0, this.length));
  }
}


/***/ }),

/***/ "./src/lib/table/row-table-batch.js":
/*!******************************************!*\
  !*** ./src/lib/table/row-table-batch.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RowTableBatch; });
const DEFAULT_OPTIONS = {
  batchSize: 'auto',
  convertToObject: true,
  // optimizes memory usage but increases parsing time.
  optimizeMemoryUsage: false
};

class RowTableBatch {
  constructor(schema, options = {}) {
    options = {...DEFAULT_OPTIONS, ...options};

    this.schema = schema;
    this.batchSize = options.batchSize;
    this.convertToObject = options.convertToObject;
    this.optimizeMemoryUsage = options.optimizeMemoryUsage;

    this.rows = null;
    this.length = 0;
    this.isChunkComplete = false;
    this.cursor = 0;

    // schema is an array if there're no headers
    // object if there are headers
    if (!Array.isArray(schema)) {
      this._headers = [];
      for (const key in schema) {
        this._headers[schema[key].index] = schema[key].name;
      }
    }
  }

  addRow(row, cursor = null) {
    if (!this.rows) {
      this.rows = new Array(this.batchSize);
      this.length = 0;
    }
    if (Number.isFinite(cursor)) {
      this.cursor = cursor;
    }

    // We can only convert if we were given a schema
    const convertToObject = this.convertToObject && this.schema;
    this.rows[this.length] = convertToObject ? convertRowToObject(row, this._headers) : row;

    if (this.optimizeMemoryUsage) {
      // A workaround to allocate new strings and don't retain pointers to original strings.
      // https://bugs.chromium.org/p/v8/issues/detail?id=2869
      this.rows[this.length] = JSON.parse(JSON.stringify(this.rows[this.length]));
    }

    this.length++;
  }

  chunkComplete() {
    this.isChunkComplete = true;
  }

  isFull() {
    if (this.batchSize === 'auto') {
      return this.isChunkComplete && this.length > 0;
    }
    return this.rows && this.length >= this.batchSize;
  }

  getBatch() {
    if (this.rows) {
      const rows = this.rows.slice(0, this.length);
      this.rows = null;
      this.isChunkComplete = false;
      return {data: rows, schema: this.schema, length: rows.length, cursor: this.cursor};
    }
    return null;
  }
}

function convertRowToObject(row, headers) {
  if (!row) {
    throw new Error('null row');
  }
  if (!Array.isArray(row)) {
    return row;
  }

  if (!headers) {
    return row;
  }
  const result = {};
  for (let i = 0; i < headers.length; i++) {
    result[headers[i]] = row[i];
  }
  return result;
}


/***/ }),

/***/ "./src/lib/table/table-batch-builder.js":
/*!**********************************************!*\
  !*** ./src/lib/table/table-batch-builder.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TableBatchBuilder; });
const DEFAULT_BATCH_SIZE = 100;

const DEFAULT_OPTIONS = {
  batchSize: DEFAULT_BATCH_SIZE
};

class TableBatchBuilder {
  constructor(TableBatchType, schema, options = {}) {
    this.TableBatchType = TableBatchType;
    this.schema = schema;
    this.options = {...DEFAULT_OPTIONS, ...options};

    this.batch = null;
    this.batchCount = 0;
    this.bytesUsed = 0;
  }

  addRow(row) {
    if (!this.batch) {
      const {TableBatchType} = this;
      this.batch = new TableBatchType(this.schema, this.options);
    }

    this.batch.addRow(row);
  }

  chunkComplete(chunk) {
    this.bytesUsed += chunk.byteLength || chunk.length || 0;
    if (this.batch) {
      this.batch.chunkComplete();
    }
  }

  isFull() {
    return this.batch && this.batch.isFull();
  }

  hasBatch() {
    return Boolean(this.batch);
  }

  getBatch(options = {}) {
    if (Number.isFinite(options.bytesUsed)) {
      this.bytesUsed = options.bytesUsed;
    }

    if (this.batch) {
      const normalizedBatch = this.batch.getBatch();
      this.batch = null;
      normalizedBatch.count = this.batchCount;
      this.batchCount++;
      normalizedBatch.bytesUsed = this.bytesUsed;
      Object.assign(normalizedBatch, options);
      return normalizedBatch;
    }

    return null;
  }
}


/***/ }),

/***/ "./src/lib/types/arrow-like/enum.js":
/*!******************************************!*\
  !*** ./src/lib/types/arrow-like/enum.js ***!
  \******************************************/
/*! exports provided: Type */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });
// This code is adapted from ArrowJS https://github.com/apache/arrow
// under Apache license http://www.apache.org/licenses/LICENSE-2.0

/**
 * Main data type enumeration.
 *
 * Data types in this library are all *logical*. They can be expressed as
 * either a primitive physical type (bytes or bits of some fixed size), a
 * nested type consisting of other data types, or another data type (e.g. a
 * timestamp encoded as an int64).
 *
 * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow
 * IPC payload.
 *
 * The rest of the values are specified here so TypeScript can narrow the type
 * signatures further beyond the base Arrow Types. The Arrow DataTypes include
 * metadata like `bitWidth` that impact the type signatures of the values we
 * accept and return.
 *
 * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an
 * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`
 * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the
 * underlying `Int32Array`.
 *
 * Library consumers benefit by knowing the narrowest type, since we can ensure
 * the types across all public methods are propagated, and never bail to `any`.
 * These values are _never_ used at runtime, and they will _never_ be written
 * to the flatbuffers metadata of serialized Arrow IPC payloads.
 */
const Type = {
  /** The default placeholder type */
  NONE: 0,
  /** A NULL type having no physical storage */
  Null: 1,
  /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */
  Int: 2,
  /** 2, 4, or 8-byte floating point value */
  Float: 3,
  /** Variable-length bytes (no guarantee of UTF8-ness) */
  Binary: 4,
  /** UTF8 variable-length string as List<Char> */
  Utf8: 5,
  /** Boolean as 1 bit, LSB bit-packed ordering */
  Bool: 6,
  /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */
  Decimal: 7,
  /** int32_t days or int64_t milliseconds since the UNIX epoch */
  Date: 8,
  /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */
  Time: 9,
  /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */
  Timestamp: 10,
  /** YEAR_MONTH or DAY_TIME interval in SQL style */
  Interval: 11,
  /** A list of some logical data type */
  List: 12,
  /** Struct of logical types */
  Struct: 13,
  /** Union of logical types */
  Union: 14,
  /** Fixed-size binary. Each value occupies the same number of bytes */
  FixedSizeBinary: 15,
  /** Fixed-size list. Each value occupies the same number of bytes */
  FixedSizeList: 16,
  /** Map of named logical types */
  Map: 17,

  /** Dictionary aka Category type */
  Dictionary: -1,
  Int8: -2,
  Int16: -3,
  Int32: -4,
  Int64: -5,
  Uint8: -6,
  Uint16: -7,
  Uint32: -8,
  Uint64: -9,
  Float16: -10,
  Float32: -11,
  Float64: -12,
  DateDay: -13,
  DateMillisecond: -14,
  TimestampSecond: -15,
  TimestampMillisecond: -16,
  TimestampMicrosecond: -17,
  TimestampNanosecond: -18,
  TimeSecond: -19,
  TimeMillisecond: -20,
  TimeMicrosecond: -21,
  TimeNanosecond: -22,
  DenseUnion: -23,
  SparseUnion: -24,
  IntervalDayTime: -25,
  IntervalYearMonth: -26
};


/***/ }),

/***/ "./src/lib/types/arrow-like/type.js":
/*!******************************************!*\
  !*** ./src/lib/types/arrow-like/type.js ***!
  \******************************************/
/*! exports provided: DataType, Null, Bool, Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64, Float, Float16, Float32, Float64, Utf8, Date, DateDay, DateMillisecond, Time, TimeSecond, TimeMillisecond, Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond, Interval, IntervalDayTime, IntervalYearMonth, FixedSizeList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataType", function() { return DataType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Null", function() { return Null; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bool", function() { return Bool; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int", function() { return Int; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int8", function() { return Int8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int16", function() { return Int16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int32", function() { return Int32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int64", function() { return Int64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8", function() { return Uint8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint16", function() { return Uint16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint32", function() { return Uint32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint64", function() { return Uint64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float", function() { return Float; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float16", function() { return Float16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float32", function() { return Float32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Float64", function() { return Float64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Utf8", function() { return Utf8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Date", function() { return Date; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateDay", function() { return DateDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateMillisecond", function() { return DateMillisecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Time", function() { return Time; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeSecond", function() { return TimeSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeMillisecond", function() { return TimeMillisecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Timestamp", function() { return Timestamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimestampSecond", function() { return TimestampSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimestampMillisecond", function() { return TimestampMillisecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimestampMicrosecond", function() { return TimestampMicrosecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimestampNanosecond", function() { return TimestampNanosecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Interval", function() { return Interval; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntervalDayTime", function() { return IntervalDayTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntervalYearMonth", function() { return IntervalYearMonth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FixedSizeList", function() { return FixedSizeList; });
/* harmony import */ var _enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enum */ "./src/lib/types/arrow-like/enum.js");
// This code is adapted from ArrowJS https://github.com/apache/arrow
// under Apache license http://www.apache.org/licenses/LICENSE-2.0



class DataType {
  static isNull(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Null;
  }
  static isInt(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Int;
  }
  static isFloat(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Float;
  }
  static isBinary(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Binary;
  }
  static isUtf8(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Utf8;
  }
  static isBool(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Bool;
  }
  static isDecimal(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Decimal;
  }
  static isDate(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Date;
  }
  static isTime(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Time;
  }
  static isTimestamp(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Timestamp;
  }
  static isInterval(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Interval;
  }
  static isList(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].List;
  }
  static isStruct(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Struct;
  }
  static isUnion(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Union;
  }
  static isFixedSizeBinary(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].FixedSizeBinary;
  }
  static isFixedSizeList(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].FixedSizeList;
  }
  static isMap(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Map;
  }
  static isDictionary(x) {
    return x && x.typeId === _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Dictionary;
  }

  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].NONE;
  }
  // get ArrayType() { return Array; }
  compareTo(other) {
    // TODO
    return this === other; // comparer.visit(this, other);
  }
}

// NULL

class Null extends DataType {
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Null;
  }
  get [Symbol.toStringTag]() {
    return 'Null';
  }
  toString() {
    return `Null`;
  }
}

// BOOLEANS

class Bool extends DataType {
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Bool;
  }
  get ArrayType() {
    return Uint8Array;
  }
  get [Symbol.toStringTag]() {
    return 'Bool';
  }
  toString() {
    return `Bool`;
  }
}

// INTS

class Int extends DataType {
  constructor(isSigned, bitWidth) {
    super();
    this.isSigned = isSigned;
    this.bitWidth = bitWidth;
  }
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Int;
  }
  get ArrayType() {
    switch (this.bitWidth) {
      case 8:
        return this.isSigned ? Int8Array : Uint8Array;
      case 16:
        return this.isSigned ? Int16Array : Uint16Array;
      case 32:
        return this.isSigned ? Int32Array : Uint32Array;
      case 64:
        return this.isSigned ? Int32Array : Uint32Array;
      default:
        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
    }
  }
  get [Symbol.toStringTag]() {
    return 'Int';
  }
  toString() {
    return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`;
  }
}

class Int8 extends Int {
  constructor() {
    super(true, 8);
  }
}
class Int16 extends Int {
  constructor() {
    super(true, 16);
  }
}
class Int32 extends Int {
  constructor() {
    super(true, 32);
  }
}
class Int64 extends Int {
  constructor() {
    super(true, 64);
  }
}
class Uint8 extends Int {
  constructor() {
    super(false, 8);
  }
}
class Uint16 extends Int {
  constructor() {
    super(false, 16);
  }
}
class Uint32 extends Int {
  constructor() {
    super(false, 32);
  }
}
class Uint64 extends Int {
  constructor() {
    super(false, 64);
  }
}

// FLOATS

const Precision = {
  HALF: 16,
  SINGLE: 32,
  DOUBLE: 64
};

class Float extends DataType {
  constructor(precision) {
    super();
    this.precision = precision;
  }
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Float;
  }
  get ArrayType() {
    switch (this.precision) {
      case Precision.HALF:
        return Uint16Array;
      case Precision.SINGLE:
        return Float32Array;
      case Precision.DOUBLE:
        return Float64Array;
      default:
        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
    }
  }
  get [Symbol.toStringTag]() {
    return 'Float';
  }
  toString() {
    return `Float${this.precision}`;
  }
}

class Float16 extends Float {
  constructor() {
    super(Precision.HALF);
  }
}
class Float32 extends Float {
  constructor() {
    super(Precision.SINGLE);
  }
}
class Float64 extends Float {
  constructor() {
    super(Precision.DOUBLE);
  }
}

// STRINGS

class Utf8 extends DataType {
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Utf8;
  }
  get ArrayType() {
    return Uint8Array;
  }
  get [Symbol.toStringTag]() {
    return 'Utf8';
  }
  toString() {
    return `Utf8`;
  }
}

// DATES, TIMES AND INTERVALS

const DateUnit = {
  DAY: 0,
  MILLISECOND: 1
};

class Date extends DataType {
  constructor(unit) {
    super();
    this.unit = unit;
  }
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Date;
  }
  get ArrayType() {
    return Int32Array;
  }
  get [Symbol.toStringTag]() {
    return 'Date';
  }
  toString() {
    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;
  }
}

class DateDay extends Date {
  constructor() {
    super(DateUnit.DAY);
  }
}
class DateMillisecond extends Date {
  constructor() {
    super(DateUnit.MILLISECOND);
  }
}

const TimeUnit = {
  SECOND: 1,
  MILLISECOND: 1e3,
  MICROSECOND: 1e6,
  NANOSECOND: 1e9
};

class Time extends DataType {
  constructor(unit, bitWidth) {
    super();
    this.unit = unit;
    this.bitWidth = bitWidth;
  }
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Time;
  }
  toString() {
    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;
  }
  get [Symbol.toStringTag]() {
    return 'Time';
  }
  get ArrayType() {
    return Int32Array;
  }
}

class TimeSecond extends Time {
  constructor() {
    super(TimeUnit.SECOND, 32);
  }
}
class TimeMillisecond extends Time {
  constructor() {
    super(TimeUnit.MILLISECOND, 32);
  }
}
// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }
// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }

class Timestamp extends DataType {
  constructor(unit, timezone = null) {
    super();
    this.unit = unit;
    this.timezone = timezone;
  }
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Timestamp;
  }
  get ArrayType() {
    return Int32Array;
  }
  get [Symbol.toStringTag]() {
    return 'Timestamp';
  }
  toString() {
    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`;
  }
}

class TimestampSecond extends Timestamp {
  constructor(timezone = null) {
    super(TimeUnit.SECOND, timezone);
  }
}
class TimestampMillisecond extends Timestamp {
  constructor(timezone = null) {
    super(TimeUnit.MILLISECOND, timezone);
  }
}
class TimestampMicrosecond extends Timestamp {
  constructor(timezone = null) {
    super(TimeUnit.MICROSECOND, timezone);
  }
}
class TimestampNanosecond extends Timestamp {
  constructor(timezone = null) {
    super(TimeUnit.NANOSECOND, timezone);
  }
}

const IntervalUnit = {
  DAY_TIME: 0,
  YEAR_MONTH: 1
};

class Interval extends DataType {
  constructor(unit) {
    super();
    this.unit = unit;
  }
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].Interval;
  }
  get ArrayType() {
    return Int32Array;
  }
  get [Symbol.toStringTag]() {
    return 'Interval';
  }
  toString() {
    return `Interval<${IntervalUnit[this.unit]}>`;
  }
}

class IntervalDayTime extends Interval {
  constructor() {
    super(IntervalUnit.DAY_TIME);
  }
}
class IntervalYearMonth extends Interval {
  constructor() {
    super(IntervalUnit.YEAR_MONTH);
  }
}

class FixedSizeList extends DataType {
  constructor(listSize, child) {
    super();
    this.listSize = listSize;
    this.children = [child];
  }
  get typeId() {
    return _enum__WEBPACK_IMPORTED_MODULE_0__["Type"].FixedSizeList;
  }
  get valueType() {
    return this.children[0].type;
  }
  get valueField() {
    return this.children[0];
  }
  get ArrayType() {
    return this.valueType.ArrayType;
  }
  get [Symbol.toStringTag]() {
    return 'FixedSizeList';
  }
  toString() {
    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;
  }
}


/***/ }),

/***/ "./src/lib/types/type-utils.js":
/*!*************************************!*\
  !*** ./src/lib/types/type-utils.js ***!
  \*************************************/
/*! exports provided: getTypeInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTypeInfo", function() { return getTypeInfo; });
/* harmony import */ var _arrow_like_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrow-like/enum */ "./src/lib/types/arrow-like/enum.js");


function getTypeInfo(arrowTypeLike) {
  return {
    typeId: arrowTypeLike.typeId,
    ArrayType: arrowTypeLike.ArrayType,
    typeName: arrowTypeLike.toString(),
    typeEnumName: getTypeKey(arrowTypeLike.typeId),
    precision: arrowTypeLike.precision
  };
}

let ReverseType = null;

function getTypeKey(typeKey) {
  if (!ReverseType) {
    ReverseType = {};
    for (const key in _arrow_like_enum__WEBPACK_IMPORTED_MODULE_0__["Type"]) {
      ReverseType[_arrow_like_enum__WEBPACK_IMPORTED_MODULE_0__["Type"][key]] = key;
    }
  }

  return ReverseType[typeKey];
}


/***/ }),

/***/ "./src/lib/utils/assert.js":
/*!*********************************!*\
  !*** ./src/lib/utils/assert.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return assert; });
// Replacement for the external assert method to reduce bundle size
// Note: We don't use the second "message" argument in calling code,
// so no need to support it here
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'loader assertion failed.');
  }
}


/***/ }),

/***/ "./src/lib/utils/async-queue.js":
/*!**************************************!*\
  !*** ./src/lib/utils/async-queue.js ***!
  \**************************************/
/*! exports provided: takeAsync, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeAsync", function() { return takeAsync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AsyncQueue; });
// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license
// http://2ality.com/2016/10/asynchronous-iteration.html

class ArrayQueue extends Array {
  enqueue(value) {
    // Add at the end
    return this.push(value);
  }
  dequeue() {
    // Remove first element
    return this.shift();
  }
}

/**
 * @returns a Promise for an Array with the elements
 * in `asyncIterable`
 */
async function takeAsync(asyncIterable, count = Infinity) {
  const result = [];
  const iterator = asyncIterable[Symbol.asyncIterator]();
  while (result.length < count) {
    const {value, done} = await iterator.next();
    if (done) {
      break;
    }
    result.push(value);
  }
  return result;
}

class AsyncQueue {
  constructor() {
    // enqueues > dequeues
    this._values = new ArrayQueue();
    // dequeues > enqueues
    this._settlers = new ArrayQueue();
    this._closed = false;
  }

  close() {
    while (this._settlers.length > 0) {
      this._settlers.dequeue().resolve({done: true});
    }
    this._closed = true;
  }

  [Symbol.asyncIterator]() {
    return this;
  }

  enqueue(value) {
    if (this._closed) {
      throw new Error('Closed');
    }

    if (this._settlers.length > 0) {
      if (this._values.length > 0) {
        throw new Error('Illegal internal state');
      }
      const settler = this._settlers.dequeue();
      if (value instanceof Error) {
        settler.reject(value);
      } else {
        settler.resolve({value});
      }
    } else {
      this._values.enqueue(value);
    }
  }

  /**
   * @returns a Promise for an IteratorResult
   */
  next() {
    if (this._values.length > 0) {
      const value = this._values.dequeue();
      if (value instanceof Error) {
        return Promise.reject(value);
      }
      return Promise.resolve({value});
    }

    if (this._closed) {
      if (this._settlers.length > 0) {
        throw new Error('Illegal internal state');
      }
      return Promise.resolve({done: true});
    }
    // Wait for new values to be enqueued
    return new Promise((resolve, reject) => {
      this._settlers.enqueue({resolve, reject});
    });
  }
}


/***/ }),

/***/ "./src/lib/xml/parse-xml.js":
/*!**********************************!*\
  !*** ./src/lib/xml/parse-xml.js ***!
  \**********************************/
/*! exports provided: default, parseXMLSupported */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return parseXML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseXMLSupported", function() { return parseXMLSupported; });
/* global window, DOMParser */
function parseXML(xml) {
  if (window.DOMParser) {
    const xmlDoc = new window.DOMParser().parseFromString(xml, 'application/xml');
    const parseError = isXMLParseError(xmlDoc);
    if (parseError) {
      throw new Error(parseError);
    }
    return xmlDoc;
  }

  if (typeof window.ActiveXObject !== 'undefined') {
    const xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');
    if (xmlDoc) {
      xmlDoc.async = 'false';
      xmlDoc.loadXML(xml);
      return xmlDoc;
    }
  }

  throw new Error('No XML parser available');
}

function parseXMLSupported() {
  if (typeof window === 'undefined') {
    return false;
  }

  if (window.DOMParser) {
    return true;
  }

  if (typeof window.ActiveXObject !== 'undefined' && new window.ActiveXObject('Microsoft.XMLDOM')) {
    return true;
  }

  return false;
}

// https://stackoverflow.com/questions/11563554/how-do-i-detect-xml-parsing-errors-when-using-javascripts-domparser-in-a-cross
function isXMLParseError(parsedDocument) {
  const parser = new DOMParser();
  const erroneousParse = parser.parseFromString('<', 'text/xml');
  const parsererrorNS = erroneousParse.getElementsByTagName('parsererror')[0].namespaceURI;

  if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {
    // In PhantomJS the parseerror element doesn't seem to have a special namespace,
    // so we are just guessing here :(
    const errorElements = parsedDocument.getElementsByTagName('parsererror');
    return errorElements.length ? errorElements[0].innerHTML : null;
  }

  return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;
}


/***/ }),

/***/ "./src/xml-loader.js":
/*!***************************!*\
  !*** ./src/xml-loader.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_xml_parse_xml__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/xml/parse-xml */ "./src/lib/xml/parse-xml.js");


const XML_HEADER = '<?xml';

function testText(text) {
  return text.startsWith(XML_HEADER);
}

/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'KML',
  extensions: ['kml'],
  supported: Object(_lib_xml_parse_xml__WEBPACK_IMPORTED_MODULE_0__["parseXMLSupported"])(),
  testText,
  parseTextSync: _lib_xml_parse_xml__WEBPACK_IMPORTED_MODULE_0__["default"],
  browserOnly: true,
  worker: false
});


/***/ })

/******/ });
});