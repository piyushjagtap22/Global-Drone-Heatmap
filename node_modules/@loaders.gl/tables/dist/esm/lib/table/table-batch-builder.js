import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DEFAULT_BATCH_SIZE = 100;
var DEFAULT_OPTIONS = {
  batchSize: DEFAULT_BATCH_SIZE
};

var TableBatchBuilder = function () {
  function TableBatchBuilder(TableBatchType, schema) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, TableBatchBuilder);

    this.TableBatchType = TableBatchType;
    this.schema = schema;
    this.options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);
    this.batch = null;
    this.batchCount = 0;
    this.bytesUsed = 0;
  }

  _createClass(TableBatchBuilder, [{
    key: "addRow",
    value: function addRow(row) {
      if (!this.batch) {
        var TableBatchType = this.TableBatchType;
        this.batch = new TableBatchType(this.schema, this.options);
      }

      this.batch.addRow(row);
    }
  }, {
    key: "chunkComplete",
    value: function chunkComplete(chunk) {
      this.bytesUsed += chunk.byteLength || chunk.length || 0;

      if (this.batch) {
        this.batch.chunkComplete();
      }
    }
  }, {
    key: "isFull",
    value: function isFull() {
      return this.batch && this.batch.isFull();
    }
  }, {
    key: "hasBatch",
    value: function hasBatch() {
      return Boolean(this.batch);
    }
  }, {
    key: "getBatch",
    value: function getBatch() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (Number.isFinite(options.bytesUsed)) {
        this.bytesUsed = options.bytesUsed;
      }

      if (this.batch) {
        var normalizedBatch = this.batch.getBatch();
        this.batch = null;
        normalizedBatch.count = this.batchCount;
        this.batchCount++;
        normalizedBatch.bytesUsed = this.bytesUsed;
        Object.assign(normalizedBatch, options);
        return normalizedBatch;
      }

      return null;
    }
  }]);

  return TableBatchBuilder;
}();

export { TableBatchBuilder as default };
//# sourceMappingURL=table-batch-builder.js.map