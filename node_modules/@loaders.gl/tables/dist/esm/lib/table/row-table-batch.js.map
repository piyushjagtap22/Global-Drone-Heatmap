{"version":3,"sources":["../../../../src/lib/table/row-table-batch.js"],"names":["DEFAULT_OPTIONS","batchSize","convertToObject","optimizeMemoryUsage","RowTableBatch","schema","options","rows","length","isChunkComplete","cursor","Array","isArray","_headers","key","index","name","row","Number","isFinite","convertRowToObject","JSON","parse","stringify","slice","data","headers","Error","result","i"],"mappings":"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","sourcesContent":["const DEFAULT_OPTIONS = {\n  batchSize: 'auto',\n  convertToObject: true,\n  // optimizes memory usage but increases parsing time.\n  optimizeMemoryUsage: false\n};\n\nexport default class RowTableBatch {\n  constructor(schema, options = {}) {\n    options = {...DEFAULT_OPTIONS, ...options};\n\n    this.schema = schema;\n    this.batchSize = options.batchSize;\n    this.convertToObject = options.convertToObject;\n    this.optimizeMemoryUsage = options.optimizeMemoryUsage;\n\n    this.rows = null;\n    this.length = 0;\n    this.isChunkComplete = false;\n    this.cursor = 0;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  addRow(row, cursor = null) {\n    if (!this.rows) {\n      this.rows = new Array(this.batchSize);\n      this.length = 0;\n    }\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor;\n    }\n\n    // We can only convert if we were given a schema\n    const convertToObject = this.convertToObject && this.schema;\n    this.rows[this.length] = convertToObject ? convertRowToObject(row, this._headers) : row;\n\n    if (this.optimizeMemoryUsage) {\n      // A workaround to allocate new strings and don't retain pointers to original strings.\n      // https://bugs.chromium.org/p/v8/issues/detail?id=2869\n      this.rows[this.length] = JSON.parse(JSON.stringify(this.rows[this.length]));\n    }\n\n    this.length++;\n  }\n\n  chunkComplete() {\n    this.isChunkComplete = true;\n  }\n\n  isFull() {\n    if (this.batchSize === 'auto') {\n      return this.isChunkComplete && this.length > 0;\n    }\n    return this.rows && this.length >= this.batchSize;\n  }\n\n  getBatch() {\n    if (this.rows) {\n      const rows = this.rows.slice(0, this.length);\n      this.rows = null;\n      this.isChunkComplete = false;\n      return {data: rows, schema: this.schema, length: rows.length, cursor: this.cursor};\n    }\n    return null;\n  }\n}\n\nfunction convertRowToObject(row, headers) {\n  if (!row) {\n    throw new Error('null row');\n  }\n  if (!Array.isArray(row)) {\n    return row;\n  }\n\n  if (!headers) {\n    return row;\n  }\n  const result = {};\n  for (let i = 0; i < headers.length; i++) {\n    result[headers[i]] = row[i];\n  }\n  return result;\n}\n"],"file":"row-table-batch.js"}