import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { Type } from './enum';
export var DataType = function () {
  function DataType() {
    _classCallCheck(this, DataType);
  }

  _createClass(DataType, [{
    key: "compareTo",
    value: function compareTo(other) {
      return this === other;
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.NONE;
    }
  }], [{
    key: "isNull",
    value: function isNull(x) {
      return x && x.typeId === Type.Null;
    }
  }, {
    key: "isInt",
    value: function isInt(x) {
      return x && x.typeId === Type.Int;
    }
  }, {
    key: "isFloat",
    value: function isFloat(x) {
      return x && x.typeId === Type.Float;
    }
  }, {
    key: "isBinary",
    value: function isBinary(x) {
      return x && x.typeId === Type.Binary;
    }
  }, {
    key: "isUtf8",
    value: function isUtf8(x) {
      return x && x.typeId === Type.Utf8;
    }
  }, {
    key: "isBool",
    value: function isBool(x) {
      return x && x.typeId === Type.Bool;
    }
  }, {
    key: "isDecimal",
    value: function isDecimal(x) {
      return x && x.typeId === Type.Decimal;
    }
  }, {
    key: "isDate",
    value: function isDate(x) {
      return x && x.typeId === Type.Date;
    }
  }, {
    key: "isTime",
    value: function isTime(x) {
      return x && x.typeId === Type.Time;
    }
  }, {
    key: "isTimestamp",
    value: function isTimestamp(x) {
      return x && x.typeId === Type.Timestamp;
    }
  }, {
    key: "isInterval",
    value: function isInterval(x) {
      return x && x.typeId === Type.Interval;
    }
  }, {
    key: "isList",
    value: function isList(x) {
      return x && x.typeId === Type.List;
    }
  }, {
    key: "isStruct",
    value: function isStruct(x) {
      return x && x.typeId === Type.Struct;
    }
  }, {
    key: "isUnion",
    value: function isUnion(x) {
      return x && x.typeId === Type.Union;
    }
  }, {
    key: "isFixedSizeBinary",
    value: function isFixedSizeBinary(x) {
      return x && x.typeId === Type.FixedSizeBinary;
    }
  }, {
    key: "isFixedSizeList",
    value: function isFixedSizeList(x) {
      return x && x.typeId === Type.FixedSizeList;
    }
  }, {
    key: "isMap",
    value: function isMap(x) {
      return x && x.typeId === Type.Map;
    }
  }, {
    key: "isDictionary",
    value: function isDictionary(x) {
      return x && x.typeId === Type.Dictionary;
    }
  }]);

  return DataType;
}();
export var Null = function (_DataType) {
  _inherits(Null, _DataType);

  var _super = _createSuper(Null);

  function Null() {
    _classCallCheck(this, Null);

    return _super.apply(this, arguments);
  }

  _createClass(Null, [{
    key: "toString",
    value: function toString() {
      return "Null";
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.Null;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Null';
    }
  }]);

  return Null;
}(DataType);
export var Bool = function (_DataType2) {
  _inherits(Bool, _DataType2);

  var _super2 = _createSuper(Bool);

  function Bool() {
    _classCallCheck(this, Bool);

    return _super2.apply(this, arguments);
  }

  _createClass(Bool, [{
    key: "toString",
    value: function toString() {
      return "Bool";
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.Bool;
    }
  }, {
    key: "ArrayType",
    get: function get() {
      return Uint8Array;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Bool';
    }
  }]);

  return Bool;
}(DataType);
export var Int = function (_DataType3) {
  _inherits(Int, _DataType3);

  var _super3 = _createSuper(Int);

  function Int(isSigned, bitWidth) {
    var _this;

    _classCallCheck(this, Int);

    _this = _super3.call(this);
    _this.isSigned = isSigned;
    _this.bitWidth = bitWidth;
    return _this;
  }

  _createClass(Int, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.isSigned ? "I" : "Ui", "nt").concat(this.bitWidth);
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.Int;
    }
  }, {
    key: "ArrayType",
    get: function get() {
      switch (this.bitWidth) {
        case 8:
          return this.isSigned ? Int8Array : Uint8Array;

        case 16:
          return this.isSigned ? Int16Array : Uint16Array;

        case 32:
          return this.isSigned ? Int32Array : Uint32Array;

        case 64:
          return this.isSigned ? Int32Array : Uint32Array;

        default:
          throw new Error("Unrecognized ".concat(this[Symbol.toStringTag], " type"));
      }
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Int';
    }
  }]);

  return Int;
}(DataType);
export var Int8 = function (_Int) {
  _inherits(Int8, _Int);

  var _super4 = _createSuper(Int8);

  function Int8() {
    _classCallCheck(this, Int8);

    return _super4.call(this, true, 8);
  }

  return Int8;
}(Int);
export var Int16 = function (_Int2) {
  _inherits(Int16, _Int2);

  var _super5 = _createSuper(Int16);

  function Int16() {
    _classCallCheck(this, Int16);

    return _super5.call(this, true, 16);
  }

  return Int16;
}(Int);
export var Int32 = function (_Int3) {
  _inherits(Int32, _Int3);

  var _super6 = _createSuper(Int32);

  function Int32() {
    _classCallCheck(this, Int32);

    return _super6.call(this, true, 32);
  }

  return Int32;
}(Int);
export var Int64 = function (_Int4) {
  _inherits(Int64, _Int4);

  var _super7 = _createSuper(Int64);

  function Int64() {
    _classCallCheck(this, Int64);

    return _super7.call(this, true, 64);
  }

  return Int64;
}(Int);
export var Uint8 = function (_Int5) {
  _inherits(Uint8, _Int5);

  var _super8 = _createSuper(Uint8);

  function Uint8() {
    _classCallCheck(this, Uint8);

    return _super8.call(this, false, 8);
  }

  return Uint8;
}(Int);
export var Uint16 = function (_Int6) {
  _inherits(Uint16, _Int6);

  var _super9 = _createSuper(Uint16);

  function Uint16() {
    _classCallCheck(this, Uint16);

    return _super9.call(this, false, 16);
  }

  return Uint16;
}(Int);
export var Uint32 = function (_Int7) {
  _inherits(Uint32, _Int7);

  var _super10 = _createSuper(Uint32);

  function Uint32() {
    _classCallCheck(this, Uint32);

    return _super10.call(this, false, 32);
  }

  return Uint32;
}(Int);
export var Uint64 = function (_Int8) {
  _inherits(Uint64, _Int8);

  var _super11 = _createSuper(Uint64);

  function Uint64() {
    _classCallCheck(this, Uint64);

    return _super11.call(this, false, 64);
  }

  return Uint64;
}(Int);
var Precision = {
  HALF: 16,
  SINGLE: 32,
  DOUBLE: 64
};
export var Float = function (_DataType4) {
  _inherits(Float, _DataType4);

  var _super12 = _createSuper(Float);

  function Float(precision) {
    var _this2;

    _classCallCheck(this, Float);

    _this2 = _super12.call(this);
    _this2.precision = precision;
    return _this2;
  }

  _createClass(Float, [{
    key: "toString",
    value: function toString() {
      return "Float".concat(this.precision);
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.Float;
    }
  }, {
    key: "ArrayType",
    get: function get() {
      switch (this.precision) {
        case Precision.HALF:
          return Uint16Array;

        case Precision.SINGLE:
          return Float32Array;

        case Precision.DOUBLE:
          return Float64Array;

        default:
          throw new Error("Unrecognized ".concat(this[Symbol.toStringTag], " type"));
      }
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Float';
    }
  }]);

  return Float;
}(DataType);
export var Float16 = function (_Float) {
  _inherits(Float16, _Float);

  var _super13 = _createSuper(Float16);

  function Float16() {
    _classCallCheck(this, Float16);

    return _super13.call(this, Precision.HALF);
  }

  return Float16;
}(Float);
export var Float32 = function (_Float2) {
  _inherits(Float32, _Float2);

  var _super14 = _createSuper(Float32);

  function Float32() {
    _classCallCheck(this, Float32);

    return _super14.call(this, Precision.SINGLE);
  }

  return Float32;
}(Float);
export var Float64 = function (_Float3) {
  _inherits(Float64, _Float3);

  var _super15 = _createSuper(Float64);

  function Float64() {
    _classCallCheck(this, Float64);

    return _super15.call(this, Precision.DOUBLE);
  }

  return Float64;
}(Float);
export var Utf8 = function (_DataType5) {
  _inherits(Utf8, _DataType5);

  var _super16 = _createSuper(Utf8);

  function Utf8() {
    _classCallCheck(this, Utf8);

    return _super16.apply(this, arguments);
  }

  _createClass(Utf8, [{
    key: "toString",
    value: function toString() {
      return "Utf8";
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.Utf8;
    }
  }, {
    key: "ArrayType",
    get: function get() {
      return Uint8Array;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Utf8';
    }
  }]);

  return Utf8;
}(DataType);
var DateUnit = {
  DAY: 0,
  MILLISECOND: 1
};

var _Date = function (_DataType6) {
  _inherits(_Date, _DataType6);

  var _super17 = _createSuper(_Date);

  function _Date(unit) {
    var _this3;

    _classCallCheck(this, _Date);

    _this3 = _super17.call(this);
    _this3.unit = unit;
    return _this3;
  }

  _createClass(_Date, [{
    key: "toString",
    value: function toString() {
      return "Date".concat((this.unit + 1) * 32, "<").concat(DateUnit[this.unit], ">");
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.Date;
    }
  }, {
    key: "ArrayType",
    get: function get() {
      return Int32Array;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Date';
    }
  }]);

  return _Date;
}(DataType);

export { _Date as Date };
export var DateDay = function (_Date2) {
  _inherits(DateDay, _Date2);

  var _super18 = _createSuper(DateDay);

  function DateDay() {
    _classCallCheck(this, DateDay);

    return _super18.call(this, DateUnit.DAY);
  }

  return DateDay;
}(_Date);
export var DateMillisecond = function (_Date3) {
  _inherits(DateMillisecond, _Date3);

  var _super19 = _createSuper(DateMillisecond);

  function DateMillisecond() {
    _classCallCheck(this, DateMillisecond);

    return _super19.call(this, DateUnit.MILLISECOND);
  }

  return DateMillisecond;
}(_Date);
var TimeUnit = {
  SECOND: 1,
  MILLISECOND: 1e3,
  MICROSECOND: 1e6,
  NANOSECOND: 1e9
};
export var Time = function (_DataType7) {
  _inherits(Time, _DataType7);

  var _super20 = _createSuper(Time);

  function Time(unit, bitWidth) {
    var _this4;

    _classCallCheck(this, Time);

    _this4 = _super20.call(this);
    _this4.unit = unit;
    _this4.bitWidth = bitWidth;
    return _this4;
  }

  _createClass(Time, [{
    key: "toString",
    value: function toString() {
      return "Time".concat(this.bitWidth, "<").concat(TimeUnit[this.unit], ">");
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.Time;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Time';
    }
  }, {
    key: "ArrayType",
    get: function get() {
      return Int32Array;
    }
  }]);

  return Time;
}(DataType);
export var TimeSecond = function (_Time) {
  _inherits(TimeSecond, _Time);

  var _super21 = _createSuper(TimeSecond);

  function TimeSecond() {
    _classCallCheck(this, TimeSecond);

    return _super21.call(this, TimeUnit.SECOND, 32);
  }

  return TimeSecond;
}(Time);
export var TimeMillisecond = function (_Time2) {
  _inherits(TimeMillisecond, _Time2);

  var _super22 = _createSuper(TimeMillisecond);

  function TimeMillisecond() {
    _classCallCheck(this, TimeMillisecond);

    return _super22.call(this, TimeUnit.MILLISECOND, 32);
  }

  return TimeMillisecond;
}(Time);
export var Timestamp = function (_DataType8) {
  _inherits(Timestamp, _DataType8);

  var _super23 = _createSuper(Timestamp);

  function Timestamp(unit) {
    var _this5;

    var timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, Timestamp);

    _this5 = _super23.call(this);
    _this5.unit = unit;
    _this5.timezone = timezone;
    return _this5;
  }

  _createClass(Timestamp, [{
    key: "toString",
    value: function toString() {
      return "Timestamp<".concat(TimeUnit[this.unit]).concat(this.timezone ? ", ".concat(this.timezone) : "", ">");
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.Timestamp;
    }
  }, {
    key: "ArrayType",
    get: function get() {
      return Int32Array;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Timestamp';
    }
  }]);

  return Timestamp;
}(DataType);
export var TimestampSecond = function (_Timestamp) {
  _inherits(TimestampSecond, _Timestamp);

  var _super24 = _createSuper(TimestampSecond);

  function TimestampSecond() {
    var timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, TimestampSecond);

    return _super24.call(this, TimeUnit.SECOND, timezone);
  }

  return TimestampSecond;
}(Timestamp);
export var TimestampMillisecond = function (_Timestamp2) {
  _inherits(TimestampMillisecond, _Timestamp2);

  var _super25 = _createSuper(TimestampMillisecond);

  function TimestampMillisecond() {
    var timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, TimestampMillisecond);

    return _super25.call(this, TimeUnit.MILLISECOND, timezone);
  }

  return TimestampMillisecond;
}(Timestamp);
export var TimestampMicrosecond = function (_Timestamp3) {
  _inherits(TimestampMicrosecond, _Timestamp3);

  var _super26 = _createSuper(TimestampMicrosecond);

  function TimestampMicrosecond() {
    var timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, TimestampMicrosecond);

    return _super26.call(this, TimeUnit.MICROSECOND, timezone);
  }

  return TimestampMicrosecond;
}(Timestamp);
export var TimestampNanosecond = function (_Timestamp4) {
  _inherits(TimestampNanosecond, _Timestamp4);

  var _super27 = _createSuper(TimestampNanosecond);

  function TimestampNanosecond() {
    var timezone = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, TimestampNanosecond);

    return _super27.call(this, TimeUnit.NANOSECOND, timezone);
  }

  return TimestampNanosecond;
}(Timestamp);
var IntervalUnit = {
  DAY_TIME: 0,
  YEAR_MONTH: 1
};
export var Interval = function (_DataType9) {
  _inherits(Interval, _DataType9);

  var _super28 = _createSuper(Interval);

  function Interval(unit) {
    var _this6;

    _classCallCheck(this, Interval);

    _this6 = _super28.call(this);
    _this6.unit = unit;
    return _this6;
  }

  _createClass(Interval, [{
    key: "toString",
    value: function toString() {
      return "Interval<".concat(IntervalUnit[this.unit], ">");
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.Interval;
    }
  }, {
    key: "ArrayType",
    get: function get() {
      return Int32Array;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'Interval';
    }
  }]);

  return Interval;
}(DataType);
export var IntervalDayTime = function (_Interval) {
  _inherits(IntervalDayTime, _Interval);

  var _super29 = _createSuper(IntervalDayTime);

  function IntervalDayTime() {
    _classCallCheck(this, IntervalDayTime);

    return _super29.call(this, IntervalUnit.DAY_TIME);
  }

  return IntervalDayTime;
}(Interval);
export var IntervalYearMonth = function (_Interval2) {
  _inherits(IntervalYearMonth, _Interval2);

  var _super30 = _createSuper(IntervalYearMonth);

  function IntervalYearMonth() {
    _classCallCheck(this, IntervalYearMonth);

    return _super30.call(this, IntervalUnit.YEAR_MONTH);
  }

  return IntervalYearMonth;
}(Interval);
export var FixedSizeList = function (_DataType10) {
  _inherits(FixedSizeList, _DataType10);

  var _super31 = _createSuper(FixedSizeList);

  function FixedSizeList(listSize, child) {
    var _this7;

    _classCallCheck(this, FixedSizeList);

    _this7 = _super31.call(this);
    _this7.listSize = listSize;
    _this7.children = [child];
    return _this7;
  }

  _createClass(FixedSizeList, [{
    key: "toString",
    value: function toString() {
      return "FixedSizeList[".concat(this.listSize, "]<").concat(this.valueType, ">");
    }
  }, {
    key: "typeId",
    get: function get() {
      return Type.FixedSizeList;
    }
  }, {
    key: "valueType",
    get: function get() {
      return this.children[0].type;
    }
  }, {
    key: "valueField",
    get: function get() {
      return this.children[0];
    }
  }, {
    key: "ArrayType",
    get: function get() {
      return this.valueType.ArrayType;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'FixedSizeList';
    }
  }]);

  return FixedSizeList;
}(DataType);
//# sourceMappingURL=type.js.map