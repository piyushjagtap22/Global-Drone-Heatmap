{"version":3,"sources":["../../../../src/lib/schema/field.js"],"names":["assert","DataType","Field","name","type","nullable","metadata","Map","other","typeId"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,SAAQC,QAAR,QAAuB,0BAAvB;;IAOqBC,K;AACnB,iBAAYC,IAAZ,EAAuE;AAAA,QAArDC,IAAqD,uEAA9C,IAA8C;AAAA,QAAxCC,QAAwC,uEAA7B,KAA6B;AAAA,QAAtBC,QAAsB,uEAAX,IAAIC,GAAJ,EAAW;;AAAA;;AACrEP,IAAAA,MAAM,CAAC,OAAOG,IAAP,KAAgB,QAAjB,CAAN;AACAH,IAAAA,MAAM,CAAC,CAACI,IAAD,IAASA,IAAI,YAAYH,QAA1B,CAAN;AACAD,IAAAA,MAAM,CAAC,OAAOK,QAAP,KAAoB,SAArB,CAAN;AACAL,IAAAA,MAAM,CAAC,CAACM,QAAD,IAAa,QAAOA,QAAP,MAAoB,QAAlC,CAAN;AAEA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;;;4BAMO;AACN,aAAO,IAAIJ,KAAJ,CAAU,KAAKC,IAAf,EAAqB,KAAKC,IAA1B,EAAgC,KAAKC,QAArC,EAA+C,KAAKC,QAApD,CAAP;AACD;;;8BAESE,K,EAAO;AACf,aACE,KAAKL,IAAL,KAAcK,KAAK,CAACL,IAApB,IACA,KAAKC,IAAL,KAAcI,KAAK,CAACJ,IADpB,IAEA,KAAKC,QAAL,KAAkBG,KAAK,CAACH,QAFxB,IAGA,KAAKC,QAAL,KAAkBE,KAAK,CAACF,QAJ1B;AAMD;;;+BAEU;AACT,uBAAU,KAAKF,IAAf,SAAsB,KAAKC,QAAL,GAAgB,YAAhB,GAA+B,EAArD,SACE,KAAKC,QAAL,yBAA+B,KAAKA,QAApC,IAAiD,EADnD;AAGD;;;wBArBY;AACX,aAAO,KAAKF,IAAL,IAAa,KAAKA,IAAL,CAAUK,MAA9B;AACD;;;;;;SAfkBP,K","sourcesContent":["import assert from '../utils/assert';\nimport {DataType} from '../types/arrow-like/type';\n\n// ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n// https://loaders.gl/arrowjs/docs/api-reference/field\n// A field holds name, nullable, and metadata information about a table \"column\"\n// A Schema is essentially a list of fields\n\nexport default class Field {\n  constructor(name, type = null, nullable = false, metadata = new Map()) {\n    assert(typeof name === 'string');\n    assert(!type || type instanceof DataType);\n    assert(typeof nullable === 'boolean');\n    assert(!metadata || typeof metadata === 'object');\n\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId() {\n    return this.type && this.type.typeId;\n  }\n\n  clone() {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other) {\n    return (\n      this.name === other.name &&\n      this.type === other.type &&\n      this.nullable === other.nullable &&\n      this.metadata === other.metadata\n    );\n  }\n\n  toString() {\n    return `${this.type}${this.nullable ? ', nullable' : ''}${\n      this.metadata ? `, metadata: ${this.metadata}` : ''\n    }`;\n  }\n}\n"],"file":"field.js"}