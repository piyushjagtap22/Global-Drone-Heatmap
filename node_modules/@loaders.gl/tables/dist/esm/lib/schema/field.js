import _typeof from "@babel/runtime/helpers/esm/typeof";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import assert from '../utils/assert';
import { DataType } from '../types/arrow-like/type';

var Field = function () {
  function Field(name) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var metadata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();

    _classCallCheck(this, Field);

    assert(typeof name === 'string');
    assert(!type || type instanceof DataType);
    assert(typeof nullable === 'boolean');
    assert(!metadata || _typeof(metadata) === 'object');
    this.name = name;
    this.type = type;
    this.nullable = nullable;
    this.metadata = metadata;
  }

  _createClass(Field, [{
    key: "clone",
    value: function clone() {
      return new Field(this.name, this.type, this.nullable, this.metadata);
    }
  }, {
    key: "compareTo",
    value: function compareTo(other) {
      return this.name === other.name && this.type === other.type && this.nullable === other.nullable && this.metadata === other.metadata;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.type).concat(this.nullable ? ', nullable' : '').concat(this.metadata ? ", metadata: ".concat(this.metadata) : '');
    }
  }, {
    key: "typeId",
    get: function get() {
      return this.type && this.type.typeId;
    }
  }]);

  return Field;
}();

export { Field as default };
//# sourceMappingURL=field.js.map