class ArrayQueue extends Array {
  enqueue(value) {
    return this.push(value);
  }

  dequeue() {
    return this.shift();
  }

}

export async function takeAsync(asyncIterable, count = Infinity) {
  const result = [];
  const iterator = asyncIterable[Symbol.asyncIterator]();

  while (result.length < count) {
    const {
      value,
      done
    } = await iterator.next();

    if (done) {
      break;
    }

    result.push(value);
  }

  return result;
}
export default class AsyncQueue {
  constructor() {
    this._values = new ArrayQueue();
    this._settlers = new ArrayQueue();
    this._closed = false;
  }

  close() {
    while (this._settlers.length > 0) {
      this._settlers.dequeue().resolve({
        done: true
      });
    }

    this._closed = true;
  }

  [Symbol.asyncIterator]() {
    return this;
  }

  enqueue(value) {
    if (this._closed) {
      throw new Error('Closed');
    }

    if (this._settlers.length > 0) {
      if (this._values.length > 0) {
        throw new Error('Illegal internal state');
      }

      const settler = this._settlers.dequeue();

      if (value instanceof Error) {
        settler.reject(value);
      } else {
        settler.resolve({
          value
        });
      }
    } else {
      this._values.enqueue(value);
    }
  }

  next() {
    if (this._values.length > 0) {
      const value = this._values.dequeue();

      if (value instanceof Error) {
        return Promise.reject(value);
      }

      return Promise.resolve({
        value
      });
    }

    if (this._closed) {
      if (this._settlers.length > 0) {
        throw new Error('Illegal internal state');
      }

      return Promise.resolve({
        done: true
      });
    }

    return new Promise((resolve, reject) => {
      this._settlers.enqueue({
        resolve,
        reject
      });
    });
  }

}
//# sourceMappingURL=async-queue.js.map