{"version":3,"sources":["../../../../src/lib/utils/async-queue.js"],"names":["ArrayQueue","Array","enqueue","value","push","dequeue","shift","takeAsync","asyncIterable","count","Infinity","result","iterator","Symbol","asyncIterator","length","done","next","AsyncQueue","constructor","_values","_settlers","_closed","close","resolve","Error","settler","reject","Promise"],"mappings":"AAGA,MAAMA,UAAN,SAAyBC,KAAzB,CAA+B;AAC7BC,EAAAA,OAAO,CAACC,KAAD,EAAQ;AAEb,WAAO,KAAKC,IAAL,CAAUD,KAAV,CAAP;AACD;;AACDE,EAAAA,OAAO,GAAG;AAER,WAAO,KAAKC,KAAL,EAAP;AACD;;AAR4B;;AAe/B,OAAO,eAAeC,SAAf,CAAyBC,aAAzB,EAAwCC,KAAK,GAAGC,QAAhD,EAA0D;AAC/D,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,QAAQ,GAAGJ,aAAa,CAACK,MAAM,CAACC,aAAR,CAAb,EAAjB;;AACA,SAAOH,MAAM,CAACI,MAAP,GAAgBN,KAAvB,EAA8B;AAC5B,UAAM;AAACN,MAAAA,KAAD;AAAQa,MAAAA;AAAR,QAAgB,MAAMJ,QAAQ,CAACK,IAAT,EAA5B;;AACA,QAAID,IAAJ,EAAU;AACR;AACD;;AACDL,IAAAA,MAAM,CAACP,IAAP,CAAYD,KAAZ;AACD;;AACD,SAAOQ,MAAP;AACD;AAED,eAAe,MAAMO,UAAN,CAAiB;AAC9BC,EAAAA,WAAW,GAAG;AAEZ,SAAKC,OAAL,GAAe,IAAIpB,UAAJ,EAAf;AAEA,SAAKqB,SAAL,GAAiB,IAAIrB,UAAJ,EAAjB;AACA,SAAKsB,OAAL,GAAe,KAAf;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKF,SAAL,CAAeN,MAAf,GAAwB,CAA/B,EAAkC;AAChC,WAAKM,SAAL,CAAehB,OAAf,GAAyBmB,OAAzB,CAAiC;AAACR,QAAAA,IAAI,EAAE;AAAP,OAAjC;AACD;;AACD,SAAKM,OAAL,GAAe,IAAf;AACD;;AAED,GAACT,MAAM,CAACC,aAAR,IAAyB;AACvB,WAAO,IAAP;AACD;;AAEDZ,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,QAAI,KAAKmB,OAAT,EAAkB;AAChB,YAAM,IAAIG,KAAJ,CAAU,QAAV,CAAN;AACD;;AAED,QAAI,KAAKJ,SAAL,CAAeN,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,UAAI,KAAKK,OAAL,CAAaL,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAIU,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,YAAMC,OAAO,GAAG,KAAKL,SAAL,CAAehB,OAAf,EAAhB;;AACA,UAAIF,KAAK,YAAYsB,KAArB,EAA4B;AAC1BC,QAAAA,OAAO,CAACC,MAAR,CAAexB,KAAf;AACD,OAFD,MAEO;AACLuB,QAAAA,OAAO,CAACF,OAAR,CAAgB;AAACrB,UAAAA;AAAD,SAAhB;AACD;AACF,KAVD,MAUO;AACL,WAAKiB,OAAL,CAAalB,OAAb,CAAqBC,KAArB;AACD;AACF;;AAKDc,EAAAA,IAAI,GAAG;AACL,QAAI,KAAKG,OAAL,CAAaL,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,YAAMZ,KAAK,GAAG,KAAKiB,OAAL,CAAaf,OAAb,EAAd;;AACA,UAAIF,KAAK,YAAYsB,KAArB,EAA4B;AAC1B,eAAOG,OAAO,CAACD,MAAR,CAAexB,KAAf,CAAP;AACD;;AACD,aAAOyB,OAAO,CAACJ,OAAR,CAAgB;AAACrB,QAAAA;AAAD,OAAhB,CAAP;AACD;;AAED,QAAI,KAAKmB,OAAT,EAAkB;AAChB,UAAI,KAAKD,SAAL,CAAeN,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,cAAM,IAAIU,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,aAAOG,OAAO,CAACJ,OAAR,CAAgB;AAACR,QAAAA,IAAI,EAAE;AAAP,OAAhB,CAAP;AACD;;AAED,WAAO,IAAIY,OAAJ,CAAY,CAACJ,OAAD,EAAUG,MAAV,KAAqB;AACtC,WAAKN,SAAL,CAAenB,OAAf,CAAuB;AAACsB,QAAAA,OAAD;AAAUG,QAAAA;AAAV,OAAvB;AACD,KAFM,CAAP;AAGD;;AA9D6B","sourcesContent":["// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\nclass ArrayQueue extends Array {\n  enqueue(value) {\n    // Add at the end\n    return this.push(value);\n  }\n  dequeue() {\n    // Remove first element\n    return this.shift();\n  }\n}\n\n/**\n * @returns a Promise for an Array with the elements\n * in `asyncIterable`\n */\nexport async function takeAsync(asyncIterable, count = Infinity) {\n  const result = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) {\n      break;\n    }\n    result.push(value);\n  }\n  return result;\n}\n\nexport default class AsyncQueue {\n  constructor() {\n    // enqueues > dequeues\n    this._values = new ArrayQueue();\n    // dequeues > enqueues\n    this._settlers = new ArrayQueue();\n    this._closed = false;\n  }\n\n  close() {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.dequeue();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n\n  /**\n   * @returns a Promise for an IteratorResult\n   */\n  next() {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({value});\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true});\n    }\n    // Wait for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({resolve, reject});\n    });\n  }\n}\n"],"file":"async-queue.js"}