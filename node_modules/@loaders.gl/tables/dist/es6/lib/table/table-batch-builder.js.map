{"version":3,"sources":["../../../../src/lib/table/table-batch-builder.js"],"names":["DEFAULT_BATCH_SIZE","DEFAULT_OPTIONS","batchSize","TableBatchBuilder","constructor","TableBatchType","schema","options","batch","batchCount","bytesUsed","addRow","row","chunkComplete","chunk","byteLength","length","isFull","hasBatch","Boolean","getBatch","Number","isFinite","normalizedBatch","count","Object","assign"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,GAA3B;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,SAAS,EAAEF;AADW,CAAxB;AAIA,eAAe,MAAMG,iBAAN,CAAwB;AACrCC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,MAAjB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AAChD,SAAKF,cAAL,GAAsBA,cAAtB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAe,EAAC,GAAGN,eAAJ;AAAqB,SAAGM;AAAxB,KAAf;AAEA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACD;;AAEDC,EAAAA,MAAM,CAACC,GAAD,EAAM;AACV,QAAI,CAAC,KAAKJ,KAAV,EAAiB;AACf,YAAM;AAACH,QAAAA;AAAD,UAAmB,IAAzB;AACA,WAAKG,KAAL,GAAa,IAAIH,cAAJ,CAAmB,KAAKC,MAAxB,EAAgC,KAAKC,OAArC,CAAb;AACD;;AAED,SAAKC,KAAL,CAAWG,MAAX,CAAkBC,GAAlB;AACD;;AAEDC,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,SAAKJ,SAAL,IAAkBI,KAAK,CAACC,UAAN,IAAoBD,KAAK,CAACE,MAA1B,IAAoC,CAAtD;;AACA,QAAI,KAAKR,KAAT,EAAgB;AACd,WAAKA,KAAL,CAAWK,aAAX;AACD;AACF;;AAEDI,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKT,KAAL,IAAc,KAAKA,KAAL,CAAWS,MAAX,EAArB;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,WAAOC,OAAO,CAAC,KAAKX,KAAN,CAAd;AACD;;AAEDY,EAAAA,QAAQ,CAACb,OAAO,GAAG,EAAX,EAAe;AACrB,QAAIc,MAAM,CAACC,QAAP,CAAgBf,OAAO,CAACG,SAAxB,CAAJ,EAAwC;AACtC,WAAKA,SAAL,GAAiBH,OAAO,CAACG,SAAzB;AACD;;AAED,QAAI,KAAKF,KAAT,EAAgB;AACd,YAAMe,eAAe,GAAG,KAAKf,KAAL,CAAWY,QAAX,EAAxB;AACA,WAAKZ,KAAL,GAAa,IAAb;AACAe,MAAAA,eAAe,CAACC,KAAhB,GAAwB,KAAKf,UAA7B;AACA,WAAKA,UAAL;AACAc,MAAAA,eAAe,CAACb,SAAhB,GAA4B,KAAKA,SAAjC;AACAe,MAAAA,MAAM,CAACC,MAAP,CAAcH,eAAd,EAA+BhB,OAA/B;AACA,aAAOgB,eAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAnDoC","sourcesContent":["const DEFAULT_BATCH_SIZE = 100;\n\nconst DEFAULT_OPTIONS = {\n  batchSize: DEFAULT_BATCH_SIZE\n};\n\nexport default class TableBatchBuilder {\n  constructor(TableBatchType, schema, options = {}) {\n    this.TableBatchType = TableBatchType;\n    this.schema = schema;\n    this.options = {...DEFAULT_OPTIONS, ...options};\n\n    this.batch = null;\n    this.batchCount = 0;\n    this.bytesUsed = 0;\n  }\n\n  addRow(row) {\n    if (!this.batch) {\n      const {TableBatchType} = this;\n      this.batch = new TableBatchType(this.schema, this.options);\n    }\n\n    this.batch.addRow(row);\n  }\n\n  chunkComplete(chunk) {\n    this.bytesUsed += chunk.byteLength || chunk.length || 0;\n    if (this.batch) {\n      this.batch.chunkComplete();\n    }\n  }\n\n  isFull() {\n    return this.batch && this.batch.isFull();\n  }\n\n  hasBatch() {\n    return Boolean(this.batch);\n  }\n\n  getBatch(options = {}) {\n    if (Number.isFinite(options.bytesUsed)) {\n      this.bytesUsed = options.bytesUsed;\n    }\n\n    if (this.batch) {\n      const normalizedBatch = this.batch.getBatch();\n      this.batch = null;\n      normalizedBatch.count = this.batchCount;\n      this.batchCount++;\n      normalizedBatch.bytesUsed = this.bytesUsed;\n      Object.assign(normalizedBatch, options);\n      return normalizedBatch;\n    }\n\n    return null;\n  }\n}\n"],"file":"table-batch-builder.js"}