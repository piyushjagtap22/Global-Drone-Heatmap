{"version":3,"sources":["../../../../src/lib/table/columnar-table-batch.js"],"names":["ColumnarTableBatch","constructor","schema","options","batchSize","length","allocated","columns","isChunkComplete","reallocateColumns","addRow","row","fieldName","chunkComplete","isFull","getBatch","pruneColumns","Array","isArray","field","name","index","data","ArrayType","type","Float32Array","oldColumn","ArrayBuffer","isView","typedArray","set","map","column","slice"],"mappings":"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","sourcesContent":["export default class ColumnarTableBatch {\n  constructor(schema, options = {}) {\n    this.schema = schema;\n    this.batchSize = options.batchSize || 'auto';\n\n    this.length = 0;\n    this.allocated = 0;\n    this.columns = null;\n    this.isChunkComplete = false;\n\n    this.reallocateColumns();\n  }\n\n  addRow(row) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this.reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  // Is this TableBatch full?\n  chunkComplete() {\n    this.isChunkComplete = true;\n  }\n\n  isFull() {\n    if (this.batchSize === 'auto') {\n      return this.isChunkComplete;\n    }\n    return this.length >= this.allocated;\n  }\n\n  getBatch(options = {}) {\n    this.pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = null;\n    this.isChunkComplete = false;\n\n    return {data: columns, schema: this.schema, length: this.length};\n  }\n\n  // HELPERS\n\n  reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : this.batchSize;\n    this.columns = [];\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  pruneColumns() {\n    this.columns = this.columns.map(column => column.slice(0, this.length));\n  }\n}\n"],"file":"columnar-table-batch.js"}