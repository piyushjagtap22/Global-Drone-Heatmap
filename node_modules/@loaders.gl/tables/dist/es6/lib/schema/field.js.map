{"version":3,"sources":["../../../../src/lib/schema/field.js"],"names":["assert","DataType","Field","constructor","name","type","nullable","metadata","Map","typeId","clone","compareTo","other","toString"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,SAAQC,QAAR,QAAuB,0BAAvB;AAOA,eAAe,MAAMC,KAAN,CAAY;AACzBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAI,GAAG,IAAd,EAAoBC,QAAQ,GAAG,KAA/B,EAAsCC,QAAQ,GAAG,IAAIC,GAAJ,EAAjD,EAA4D;AACrER,IAAAA,MAAM,CAAC,OAAOI,IAAP,KAAgB,QAAjB,CAAN;AACAJ,IAAAA,MAAM,CAAC,CAACK,IAAD,IAASA,IAAI,YAAYJ,QAA1B,CAAN;AACAD,IAAAA,MAAM,CAAC,OAAOM,QAAP,KAAoB,SAArB,CAAN;AACAN,IAAAA,MAAM,CAAC,CAACO,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAAlC,CAAN;AAEA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAED,MAAIE,MAAJ,GAAa;AACX,WAAO,KAAKJ,IAAL,IAAa,KAAKA,IAAL,CAAUI,MAA9B;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,WAAO,IAAIR,KAAJ,CAAU,KAAKE,IAAf,EAAqB,KAAKC,IAA1B,EAAgC,KAAKC,QAArC,EAA+C,KAAKC,QAApD,CAAP;AACD;;AAEDI,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACf,WACE,KAAKR,IAAL,KAAcQ,KAAK,CAACR,IAApB,IACA,KAAKC,IAAL,KAAcO,KAAK,CAACP,IADpB,IAEA,KAAKC,QAAL,KAAkBM,KAAK,CAACN,QAFxB,IAGA,KAAKC,QAAL,KAAkBK,KAAK,CAACL,QAJ1B;AAMD;;AAEDM,EAAAA,QAAQ,GAAG;AACT,qBAAU,KAAKR,IAAf,SAAsB,KAAKC,QAAL,GAAgB,YAAhB,GAA+B,EAArD,SACE,KAAKC,QAAL,yBAA+B,KAAKA,QAApC,IAAiD,EADnD;AAGD;;AAlCwB","sourcesContent":["import assert from '../utils/assert';\nimport {DataType} from '../types/arrow-like/type';\n\n// ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n// https://loaders.gl/arrowjs/docs/api-reference/field\n// A field holds name, nullable, and metadata information about a table \"column\"\n// A Schema is essentially a list of fields\n\nexport default class Field {\n  constructor(name, type = null, nullable = false, metadata = new Map()) {\n    assert(typeof name === 'string');\n    assert(!type || type instanceof DataType);\n    assert(typeof nullable === 'boolean');\n    assert(!metadata || typeof metadata === 'object');\n\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId() {\n    return this.type && this.type.typeId;\n  }\n\n  clone() {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other) {\n    return (\n      this.name === other.name &&\n      this.type === other.type &&\n      this.nullable === other.nullable &&\n      this.metadata === other.metadata\n    );\n  }\n\n  toString() {\n    return `${this.type}${this.nullable ? ', nullable' : ''}${\n      this.metadata ? `, metadata: ${this.metadata}` : ''\n    }`;\n  }\n}\n"],"file":"field.js"}